{
  "_args": [
    [
      "jest-serializer@24.0.0-alpha.6",
      "/home/vult83/fetch-my-corgi/node_modules/metro-cache"
    ]
  ],
  "_from": "jest-serializer@24.0.0-alpha.6",
  "_hasShrinkwrap": false,
  "_id": "jest-serializer@24.0.0-alpha.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/metro-cache/jest-serializer",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-serializer_24.0.0-alpha.6_1541785777970_0.013899601487071811"
  },
  "_npmUser": {
    "email": "rubennorte@gmail.com",
    "name": "rubennorte"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "jest-serializer",
    "raw": "jest-serializer@24.0.0-alpha.6",
    "rawSpec": "24.0.0-alpha.6",
    "scope": null,
    "spec": "24.0.0-alpha.6",
    "type": "version"
  },
  "_requiredBy": [
    "/metro-cache"
  ],
  "_resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-24.0.0-alpha.6.tgz",
  "_shasum": "27d2fee4b1a85698717a30c3ec2ab80767312597",
  "_shrinkwrap": null,
  "_spec": "jest-serializer@24.0.0-alpha.6",
  "_where": "/home/vult83/fetch-my-corgi/node_modules/metro-cache",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {},
  "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `un",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "fileCount": 4,
    "integrity": "sha512-IPA5T6/GhlE6dedSk7Cd7YfuORnYjN0VD5iJVFn1Q81RJjpj++Hen5kJbKcg547vXsQ1TddV15qOA/zeIfOCLw==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb5ciyCRA9TVsSAnZWagAA7WkP/iRmgQwFq4toLbtAC2+l\nT8lfHAG4qB/OEGmKNwJOElHYWk+dP+yIO0imWMG40nAzitCByKRpJmjFebJ/\ncgFft2Ja2pnzYD9mzwfr6Bqmw0ybJATIpPMb36pcHdoMJb/7vE+ZBYUQcXwp\ne5ztNQo35LPiA7Al81dvEPr2CWj923zABgvhrqU8z5e79Vl3PlppZDS/Ay+C\nO9WJ17ACcdjVXF1ZYJJu0MJjMvCfJVP5RjtydEjr96VqL+V/XUdns/isq8/2\nE0XulvfUMznWKs9a1yLoajOCqYFMuLrAXwmQ7Zh1TTzwyQ6dUzNm7WsK3hAw\nyq9q7wc4LY/oBhueSxEOEK43FEs1xoa9MBJ7KMJkNOx7cgHvBDIws2hEvePz\nAGr7vSvdLyoT30bKppZcnHz2oU8mYQvMeHOn/ZUeqk4zkEIOV07MoJjdMipO\nZEgqnuoON3XtExQWbEZz0ieM6x6eBMADRsI3X+/Ds5a59WCURcdeKTyo8Bsh\nP/pWdpvdjuN4ikbi2uScYGN9nRp7P3U5U6WCYXluWV8Fk+T2CuHMP+6lsDGS\n6fsf/2JaMDZ49JNxFBjJsMkKTv8qqnpHEbK9LXEMHjGhhN9YDgsxs3L23sEA\nphdkPPmY0C+Hbmnkg/zYofoceRHFMAmrBJu6RDZjrYykztv9RqF62/NLGvRP\nCyia\r\n=+9pT\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "27d2fee4b1a85698717a30c3ec2ab80767312597",
    "tarball": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-24.0.0-alpha.6.tgz",
    "unpackedSize": 7602
  },
  "engines": {
    "node": ">= 6"
  },
  "gitHead": "49d08403a941e596eda1279c07a1eaf4d4a73dad",
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "jeanlauliac",
      "email": "jean@lauliac.com"
    },
    {
      "name": "mjesun",
      "email": "mjesun@hotmail.com"
    },
    {
      "name": "rubennorte",
      "email": "rubennorte@gmail.com"
    }
  ],
  "name": "jest-serializer",
  "optionalDependencies": {},
  "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git"
  },
  "version": "24.0.0-alpha.6"
}
